{% comment %}
  Media Video Snippet - WooCommerce Video Integration
  Bu snippet mevcut tema video yapısına uygun olarak çalışır
  
  Parametreler:
  - video: Video URL'si
  - type: Video tipi ('external' veya 'shopify')
  - aspect_ratio: Video en-boy oranı
  - video_title: Video başlığı
  - autoplay: Otomatik oynatma (true/false)
  - controls: Kontroller (true/false)
  - loop: Döngü (true/false)
  - muted: Sessiz (true/false)
  - placeholder: Placeholder video URL'si
{% endcomment %}

{%- liquid
  assign video_url = video
  assign video_type = type | default: 'external'
  assign aspect_ratio = aspect_ratio | default: 'sixteen-nine'
  assign video_title = video_title | default: 'Product Video'
  assign autoplay = autoplay | default: false
  assign controls = controls | default: true
  assign loop = loop | default: false
  assign muted = muted | default: false
  assign placeholder = placeholder | default: ''
  
  # Aspect ratio sınıfları
  assign aspect_class = 'aspect-ratio-' | append: aspect_ratio
  
  # Video attributes
  assign video_attributes = ''
  if controls
    assign video_attributes = video_attributes | append: ' controls'
  endif
  if autoplay
    assign video_attributes = video_attributes | append: ' autoplay'
  endif
  if loop
    assign video_attributes = video_attributes | append: ' loop'
  endif
  if muted
    assign video_attributes = video_attributes | append: ' muted'
  endif
-%}

<div class="media-video {{ aspect_class }}">
  <div class="media-video__wrapper">
    {%- if video_url != blank -%}
      {%- liquid
        # Video tipini belirle
        assign is_youtube = false
        assign is_vimeo = false
        assign is_direct_video = false
        
        if video_url contains 'youtube.com' or video_url contains 'youtu.be'
          assign is_youtube = true
        elsif video_url contains 'vimeo.com'
          assign is_vimeo = true
        else
          assign is_direct_video = true
        endif
      -%}
      
      {%- if is_youtube -%}
        {%- comment -%} YouTube Video {%- endcomment -%}
        {%- liquid
          assign youtube_id = video_url | split: 'v=' | last | split: '&' | first
          if video_url contains 'youtu.be'
            assign youtube_id = video_url | split: 'youtu.be/' | last | split: '?' | first
          endif
        -%}
        <div class="video-embed youtube-embed">
          <iframe
            src="https://www.youtube.com/embed/{{ youtube_id }}?rel=0&showinfo=0&modestbranding=1{% if autoplay %}&autoplay=1{% endif %}{% if loop %}&loop=1&playlist={{ youtube_id }}{% endif %}{% if muted %}&mute=1{% endif %}"
            frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen
            title="{{ video_title }}"
            loading="lazy"
          ></iframe>
        </div>
        
      {%- elsif is_vimeo -%}
        {%- comment -%} Vimeo Video {%- endcomment -%}
        {%- liquid
          assign vimeo_id = video_url | split: 'vimeo.com/' | last | split: '?' | first
        -%}
        <div class="video-embed vimeo-embed">
          <iframe
            src="https://player.vimeo.com/video/{{ vimeo_id }}?title=0&byline=0&portrait=0{% if autoplay %}&autoplay=1{% endif %}{% if loop %}&loop=1{% endif %}{% if muted %}&muted=1{% endif %}"
            frameborder="0"
            allow="autoplay; fullscreen; picture-in-picture"
            allowfullscreen
            title="{{ video_title }}"
            loading="lazy"
          ></iframe>
        </div>
        
      {%- else -%}
        {%- comment -%} Direct Video File {%- endcomment -%}
        <div class="video-direct">
          <video
            class="video-element"
            {{ video_attributes }}
            preload="metadata"
            poster="{{ product.featured_image | img_url: '800x450' }}"
            aria-label="{{ video_title }}"
          >
            <source src="{{ video_url }}" type="video/mp4">
            {%- comment -%} Fallback için farklı formatları dene {%- endcomment -%}
            {%- if video_url contains '.webm' -%}
              <source src="{{ video_url }}" type="video/webm">
            {%- elsif video_url contains '.ogg' -%}
              <source src="{{ video_url }}" type="video/ogg">
            {%- endif -%}
            <p class="video-fallback">
              {{ 'products.product.video_not_supported' | t | default: 'Your browser does not support the video tag.' }}
              <br>
              <a href="{{ video_url }}" target="_blank">{{ 'products.product.download_video' | t | default: 'Download video' }}</a>
            </p>
          </video>
          
          {%- comment -%} Video overlay for better UX {%- endcomment -%}
          <div class="video-overlay" style="display: none;">
            <div class="video-play-button">
              <svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="30" cy="30" r="30" fill="rgba(0,0,0,0.7)"/>
                <polygon points="24,18 24,42 42,30" fill="white"/>
              </svg>
            </div>
          </div>
        </div>
      {%- endif -%}
      
    {%- else -%}
      {%- comment -%} Placeholder video {%- endcomment -%}
      {%- if placeholder != blank -%}
        <div class="video-placeholder">
          <video
            class="video-element"
            controls
            preload="metadata"
            muted
            loop
          >
            <source src="{{ placeholder }}" type="video/mp4">
            <p>{{ 'products.product.video_placeholder' | t | default: 'Video placeholder' }}</p>
          </video>
        </div>
      {%- else -%}
        <div class="video-empty">
          <div class="video-empty__content">
            <svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg">
              <rect width="60" height="60" rx="8" fill="#f8f9fa"/>
              <path d="M20 20h20v20H20z" fill="#dee2e6"/>
              <polygon points="28,25 28,35 35,30" fill="#6c757d"/>
            </svg>
            <p>{{ 'products.product.no_video' | t | default: 'No video available' }}</p>
          </div>
        </div>
      {%- endif -%}
    {%- endif -%}
  </div>
</div>

<style>
/* Media Video Styles */
.media-video {
  position: relative;
  width: 100%;
  background: #000;
  border-radius: 8px;
  overflow: hidden;
}

.media-video__wrapper {
  position: relative;
  width: 100%;
  height: 0;
}

/* Aspect Ratios */
.aspect-ratio-one-one .media-video__wrapper {
  padding-bottom: 100%; /* 1:1 */
}

.aspect-ratio-four-three .media-video__wrapper {
  padding-bottom: 75%; /* 4:3 */
}

.aspect-ratio-sixteen-nine .media-video__wrapper {
  padding-bottom: 56.25%; /* 16:9 */
}

.aspect-ratio-twenty-one-nine .media-video__wrapper {
  padding-bottom: 42.86%; /* 21:9 */
}

/* Video Elements */
.video-embed,
.video-direct,
.video-placeholder,
.video-empty {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.video-embed iframe,
.video-direct video,
.video-placeholder video {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* Video Overlay */
.video-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(0, 0, 0, 0.3);
  cursor: pointer;
  transition: opacity 0.3s ease;
}

.video-overlay:hover {
  background: rgba(0, 0, 0, 0.5);
}

.video-play-button {
  transition: transform 0.3s ease;
}

.video-overlay:hover .video-play-button {
  transform: scale(1.1);
}

/* Empty Video State */
.video-empty {
  display: flex;
  align-items: center;
  justify-content: center;
  background: #f8f9fa;
}

.video-empty__content {
  text-align: center;
  color: #6c757d;
}

.video-empty__content p {
  margin: 10px 0 0 0;
  font-size: 14px;
}

/* Video Fallback */
.video-fallback {
  padding: 20px;
  text-align: center;
  color: #6c757d;
  background: #f8f9fa;
}

.video-fallback a {
  color: #007bff;
  text-decoration: none;
}

.video-fallback a:hover {
  text-decoration: underline;
}

/* Responsive */
@media (max-width: 768px) {
  .media-video {
    border-radius: 4px;
  }
}
</style>

<script>
// Video overlay functionality
document.addEventListener('DOMContentLoaded', function() {
  const videoContainers = document.querySelectorAll('.video-direct');
  
  videoContainers.forEach(container => {
    const video = container.querySelector('video');
    const overlay = container.querySelector('.video-overlay');
    
    if (video && overlay) {
      // Show overlay initially if video is not autoplay
      if (!video.hasAttribute('autoplay')) {
        overlay.style.display = 'flex';
      }
      
      // Hide overlay when video starts playing
      video.addEventListener('play', () => {
        overlay.style.display = 'none';
      });
      
      // Show overlay when video is paused
      video.addEventListener('pause', () => {
        overlay.style.display = 'flex';
      });
      
      // Show overlay when video ends
      video.addEventListener('ended', () => {
        overlay.style.display = 'flex';
      });
      
      // Click overlay to play video
      overlay.addEventListener('click', () => {
        video.play();
      });
    }
  });
});
</script>
